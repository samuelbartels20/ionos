name: 'Terraform Plan and Apply'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Install the correct Terraform version
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TF_VERSION }}

      # Step 3: Initialize Terraform with the backend and providers
      - name: Terraform Init
        run: terraform init
        env:
          # If your backend config needs secrets (e.g., S3 access keys), set them here too
          user: ${{ secrets.IONOS_USERNAME }}
          password: ${{ secrets.IONOS_PASSWORD }}
          token: ${{ secrets.IONOS_TOKEN }}
          access_key_id: ${{ secrets.IONOS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.IONOS_SECRET_ACCESS_KEY }}

      # Step 4: Check code formatting
      - name: Terraform Format
        run: terraform fmt -check

      # Step 5: Validate the code syntax
      - name: Terraform Validate
        run: terraform validate
        env:
          user: ${{ secrets.IONOS_USERNAME }}
          password: ${{ secrets.IONOS_PASSWORD }}
          token: ${{ secrets.IONOS_TOKEN }}
          access_key_id: ${{ secrets.IONOS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.IONOS_SECRET_ACCESS_KEY }}

      # Step 6: Generate an execution plan for a PR
      - name: Terraform Plan
        run: terraform plan  
        if: github.event_name == 'pull_request'
        env:
          user: ${{ secrets.IONOS_USERNAME }}
          password: ${{ secrets.IONOS_PASSWORD }}
          token: ${{ secrets.IONOS_TOKEN }}
          access_key_id: ${{ secrets.IONOS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.IONOS_SECRET_ACCESS_KEY }}
      - name: Terraform Plan Status
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`
              </details>
              *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })

      # Step 7: Apply the plan on push to main
      - name: Terraform Apply
        run: terraform apply -auto-approve
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          user: ${{ secrets.IONOS_USERNAME }}
          password: ${{ secrets.IONOS_PASSWORD }}
          token: ${{ secrets.IONOS_TOKEN }}
          access_key_id: ${{ secrets.IONOS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.IONOS_SECRET_ACCESS_KEY }}
